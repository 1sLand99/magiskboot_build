find_program(PATCH_EXECUTABLE patch REQUIRED)
message(STATUS "Found patch: ${PATCH_EXECUTABLE}")
find_package(Git REQUIRED)
if (WIN32)
    # for searching "find" program, not the win32 one
    find_program(cygpath_EXECUTABLE cygpath REQUIRED)
    message(STATUS "Found cygpath: ${cygpath_EXECUTABLE}")
    execute_process(
        COMMAND ${cygpath_EXECUTABLE} -m /bin
        OUTPUT_VARIABLE "FIND_FIND_PATH"
        COMMAND_ERROR_IS_FATAL ANY
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    # for the below quirk
    find_program(find_EXECUTABLE find REQUIRED PATHS ${FIND_FIND_PATH})
    message(STATUS "Found find: ${find_EXECUTABLE}")
endif()

set(vendored_dirs
    Magisk
    android_logging
    android_libbase
    android_core
    android_fmtlib
    mman-win32
    msvc_getline)

# XXX: Consider using https://cmake.org/cmake/help/v3.0/module/ExternalProject.html
if(PATCH_VENDOR_PROJECTS AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/patches")
    if (WIN32)
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule foreach --recursive ${GIT_EXECUTABLE} config core.symlinks true)
    endif()
    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --force --recursive)
    execute_process(COMMAND ${GIT_EXECUTABLE} submodule foreach --recursive ${GIT_EXECUTABLE} clean -fd)
    if (WIN32)
        # HACK: On Windows, symlinks have two different types: file and directory,
        #       if the target path doesn't exist when the symlink is created,
        #       Cygwin will fallback to create a non-native link, which makes the
        #       symlink unusable to pure Win32 apps (e.g. our compilers) later.
        #
        #       Since the target path may not exist at the time of creation, we can fix
        #       this by deleting all the symlinks after the first checkout and
        #       letting Git to re-create them for us.
        execute_process(COMMAND ${find_EXECUTABLE} -type l -exec rm -f {} +)
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --force --recursive)
    endif()
    foreach(vendor_dir ${vendored_dirs})
        file(GLOB patches ${CMAKE_CURRENT_SOURCE_DIR}/patches/${vendor_dir}/*.patch)
        if(patches)
	    foreach(patch_filename ${patches})
	            message(STATUS "Applying ${patch_filename} for: ${vendor_dir}")
	            execute_process(COMMAND ${PATCH_EXECUTABLE} -p1 -i ${patch_filename} --no-backup-if-mismatch
				    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/vendor/${vendor_dir}
	                            RESULT_VARIABLE ret)
	            if(NOT "${ret}" STREQUAL "0")
	                message(FATAL_ERROR "Couldn't apply ${patch_filename} for ${vendor_dir}")
	            endif()
	    endforeach()
        endif()
    endforeach()
endif()
