include(CheckSymbolExists)
check_symbol_exists(
    "strlcpy"
    "string.h"
    HAVE_STRLCPY)
if (HAVE_STRLCPY)
    target_compile_definitions(libbase PRIVATE
        -DHAVE_STRLCPY)
endif()

add_library(platform_stubs STATIC
    libc-compat/placeholder.c)
target_include_directories(platform_stubs PUBLIC libc-compat/include)

if (NOT HAVE_sendfile)
    message(STATUS "Using generic sendfile replacement")
    target_sources(platform_stubs PRIVATE
        libc-compat/non-linux/sendfile_fallback.c)
endif()

if (NOT HAVE_STRLCPY)
    message(STATUS "Using bundled libbsd strlcpy implementation")
    target_sources(platform_stubs PRIVATE
        libc-compat/libbsd/str.c)
endif()

if(NOT HAVE___errno)
    target_sources(platform_stubs PRIVATE
        libc-compat/common/__errno.c)

    # e.g Linux and Emscripten
    check_symbol_exists(__errno_location "errno.h" HAVE___errno_location)
    if (HAVE___errno_location)
        set_source_files_properties(libc-compat/common/__errno.c PROPERTIES
                                    COMPILE_FLAGS -DHAVE___errno_location)
    else()
        # e.g macOS
        check_symbol_exists(__error "errno.h" HAVE___error)
        if (HAVE___error)
        set_source_files_properties(libc-compat/common/__errno.c PROPERTIES
                                    COMPILE_FLAGS -DHAVE___error)
        else()
            # e.g MinGW
            check_symbol_exists(_errno "errno.h" HAVE__errno)
            if (HAVE__errno)
                set_source_files_properties(libc-compat/common/__errno.c PROPERTIES
                                            COMPILE_FLAGS -DHAVE__errno)
            else()
                message(FATAL_ERROR "Don't know errno implementation on this platform")
            endif()
        endif()
    endif()

    message(STATUS "Using __errno alias")
endif()

if (WIN32)
    message(STATUS "Using win32 libc-compat")

    target_sources(platform_stubs PRIVATE
        libc-compat/winsup/acl.c
        libc-compat/winsup/at.c
        libc-compat/winsup/dirent.c
        libc-compat/winsup/file.c
        libc-compat/winsup/io.c
        libc-compat/winsup/link.c
        libc-compat/winsup/mkdir.c
        libc-compat/winsup/mknod_stub.c
        libc-compat/winsup/open.c
        libc-compat/winsup/stat.c
        libc-compat/winsup/str.c
        libc-compat/winsup/uio.c
        libc-compat/winsup/internal/acl.c
        libc-compat/winsup/internal/assert.c
        libc-compat/winsup/internal/errno.c
        libc-compat/winsup/internal/fd.c
        libc-compat/winsup/internal/fs.c)
    target_link_libraries(platform_stubs INTERFACE shlwapi)

    add_library(libmman STATIC
        src/mman-win32/mman.c)
    target_compile_definitions(libmman PRIVATE -DWITH_WINSUP)
    target_include_directories(libmman PUBLIC src/mman-win32)
    target_link_libraries(platform_stubs INTERFACE libmman)

    add_library(libgetline STATIC
        src/msvc_getline/getline.c)
    target_include_directories(libgetline PUBLIC src/msvc_getline)
    target_link_libraries(platform_stubs INTERFACE libgetline)

    target_include_directories(android_libbase PRIVATE libc-compat/include)
endif()

if (EMSCRIPTEN)
    message(STATUS "Using Emscripten mmap stubs")

    target_sources(platform_stubs PRIVATE
        libc-compat/emsup/mmap_hack.c)
endif()

target_link_libraries(libbase platform_stubs)
target_link_libraries(${MAGISKBOOT_TARGET} platform_stubs)
