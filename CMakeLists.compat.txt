string(TOLOWER "${CMAKE_SYSTEM_NAME}" CXXBRIDGE_GEN_TARGET_OS)

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    # no-op
elseif (CMAKE_SYSTEM_NAME STREQUAL "Android")
    # no-op
elseif (APPLE)
    if (CMAKE_CROSSCOMPILING)
        message(STATUS "Homebrew is disabled due to cross-compiling")
    else()
        find_program(HOMEBREW_EXECUTABLE brew REQUIRED)
        execute_process(
            COMMAND ${HOMEBREW_EXECUTABLE} --prefix
            OUTPUT_VARIABLE "HOMEBREW_PREFIX"
            ERROR_QUIET
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        execute_process(
            COMMAND ${HOMEBREW_EXECUTABLE} --version
            OUTPUT_VARIABLE "HOMEBREW_VERSION"
            ERROR_QUIET
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        if (HOMEBREW_VERSION MATCHES "^Homebrew[ \t]+")
            string(REGEX MATCH "^Homebrew[ \t]+[^\n]+" HOMEBREW_VERSION ${HOMEBREW_VERSION})
            string(REGEX REPLACE "^Homebrew[ \t]+" "" HOMEBREW_VERSION ${HOMEBREW_VERSION})
        else()
            set(HOMEBREW_VERSION "unknown")
        endif()
        if (EXISTS ${HOMEBREW_PREFIX})
            message(STATUS "Found Homebrew: ${HOMEBREW_EXECUTABLE} (found version ${HOMEBREW_VERSION})")
        else()
            message(FATAL_ERROR "Cannot find Homebrew")
        endif()
        list(INSERT CMAKE_SYSTEM_PREFIX_PATH 0 ${HOMEBREW_PREFIX} ${HOMEBREW_PREFIX}/opt/bzip2)
        list(INSERT CMAKE_SYSTEM_PREFIX_PATH 1 ${HOMEBREW_PREFIX} ${HOMEBREW_PREFIX}/opt/zlib)
    endif()

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE -D__DARWIN_C_LEVEL=__DARWIN_C_FULL")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_DARWIN_C_SOURCE -D__DARWIN_C_LEVEL=__DARWIN_C_FULL")
elseif (WIN32)
    # libc-compat overrides
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--wrap=mkdir -Wl,--wrap=creat -Wl,--wrap=open -Wl,--wrap=fopen")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--wrap=fdopen -Wl,--wrap=fstat -Wl,--wrap=CreateFileW")

    # llvm-mingw uses a different mangling
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--wrap=CreateFileW@28")

    include(CheckSymbolExists)
    check_symbol_exists(_UCRT "_mingw.h" USE_UCRT)
elseif (CYGWIN)
    add_compile_definitions(__USE_LINUX_IOCTL_DEFS)
elseif (EMSCRIPTEN)
    if (NOT (CMAKE_BUILD_TYPE MATCHES "Debug") AND NOT (CMAKE_BUILD_TYPE MATCHES "MinSize"))
        # FIXME: why this is needed to pass linking
        set(RUSTFLAGS "${RUSTFLAGS} -Copt-level=z")
    endif()

    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -sALLOW_MEMORY_GROWTH -Wl,-u,ntohs -Wl,-u,htons -Wl,-u,htonl -Wl,--wrap=close")
else()
    message(WARNING "
        New platform: ${CMAKE_SYSTEM_NAME}

        You can file an Issue about this platform at https://github.com/ookiineko/magiskboot_build/issues if the build fails")
endif()

include(CheckSymbolExists)
check_symbol_exists(lseek64 "unistd.h" LSEEK64_EXISTS)
if(NOT LSEEK64_EXISTS)
    add_compile_definitions(off64_t=off_t)
    add_compile_definitions(lseek64=lseek)
    add_compile_definitions(ftruncate64=ftruncate)
endif()

if (CMAKE_SYSTEM_NAME MATCHES "Android")
    message(STATUS "Fortify enabled")
    add_compile_options(-D_FORTIFY_SOURCE=2)
else()
    message(STATUS "Fortify disabled")
    # Couldn't bypass fortify, so disable it
    # see also: include-android/fortify_stub.h
    add_compile_options(-U_FORTIFY_SOURCE)

    include(CMakeLists.android.txt)
endif()
