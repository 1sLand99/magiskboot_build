diff --git a/native/src/boot/cpio.rs b/native/src/boot/cpio.rs
index d19ce29..0e36b4d 100644
--- a/native/src/boot/cpio.rs
+++ b/native/src/boot/cpio.rs
@@ -353,8 +353,8 @@ impl Cpio {
                 symlink(Path::new(&std::str::from_utf8(entry.data.as_slice())?), out)?;
             }
             S_IFBLK | S_IFCHR => {
-                let dev = makedev(entry.rdevmajor.try_into()?, entry.rdevminor.try_into()?);
                 unsafe {
+                    let dev = makedev(entry.rdevmajor.try_into()?, entry.rdevminor.try_into()?);
                     mknod(
                         out.to_str().unwrap().as_ptr() as *const c_char,
                         entry.mode,
diff --git a/native/src/base/files.rs b/native/src/base/files.rs
index 176c828..fbcdab4 100644
--- a/native/src/base/files.rs
+++ b/native/src/base/files.rs
@@ -727,6 +730,9 @@ impl FsPath {
 
     pub fn set_attr(&self, attr: &FileAttr) -> io::Result<()> {
         unsafe {
+            #[cfg(any(target_vendor = "apple", target_os = "windows"))]
+            use libc::mode_t as c_uint;
+
             if (attr.st.st_mode & libc::S_IFMT as c_uint) != S_IFLNK.as_() {
                 libc::chmod(self.as_ptr(), (attr.st.st_mode & 0o777).as_()).as_os_err()?;
             }
@@ -749,6 +755,10 @@ impl FsPath {
 
     pub fn copy_to(&self, path: &FsPath) -> io::Result<()> {
         let attr = self.get_attr()?;
+
+        #[cfg(any(target_vendor = "apple", target_os = "windows"))]
+        use libc::mode_t as c_uint;
+
         if (attr.st.st_mode & libc::S_IFMT as c_uint) == S_IFDIR.as_() {
             path.mkdir(0o777)?;
             let mut src = Directory::open(self)?;
@@ -774,6 +784,9 @@ impl FsPath {
     }
 
     pub fn move_to(&self, path: &FsPath) -> io::Result<()> {
+        #[cfg(any(target_vendor = "apple", target_os = "windows"))]
+        use libc::mode_t as c_uint;
+
         if path.exists() {
             let attr = path.get_attr()?;
             if (attr.st.st_mode & libc::S_IFMT as c_uint) == S_IFDIR.as_() {
@@ -788,6 +801,9 @@ impl FsPath {
     }
 
     pub fn link_to(&self, path: &FsPath) -> io::Result<()> {
+        #[cfg(any(target_vendor = "apple", target_os = "windows"))]
+        use libc::mode_t as c_uint;
+
         let attr = self.get_attr()?;
         if (attr.st.st_mode & libc::S_IFMT as c_uint) == S_IFDIR.as_() {
             path.mkdir(0o777)?;
diff --git a/native/src/boot/bootimg.cpp b/native/src/boot/bootimg.cpp
index f853e61..1f6b2dc 100644
--- a/native/src/boot/bootimg.cpp
+++ b/native/src/boot/bootimg.cpp
@@ -16,6 +16,23 @@
 
 using namespace std;
 
+// refs: https://github.com/AcademySoftwareFoundation/Imath/pull/350
+//       https://stackoverflow.com/questions/67521312/safe-equivalent-of-stdbit-cast-in-c11
+#if !defined(__cpp_lib_bit_cast) || __cpp_lib_bit_cast < 201806L
+template <class T2, class T1>
+constexpr T2 cpp11_bit_cast(T1 t1) {
+  static_assert(sizeof(T1)==sizeof(T2), "Types must match sizes");
+  static_assert(std::is_pod<T1>::value, "Requires POD input");
+  static_assert(std::is_pod<T2>::value, "Requires POD output");
+
+  T2 t2;
+  std::memcpy( std::addressof(t2), std::addressof(t1), sizeof(T1) );
+  return t2;
+}
+
+#define bit_cast cpp11_bit_cast
+#endif
+
 #define PADDING 15
 #define SHA256_DIGEST_SIZE 32
 #define SHA_DIGEST_SIZE 20
