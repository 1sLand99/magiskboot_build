if (NOT APPLE)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fdata-sections -ffunction-sections")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fdata-sections -ffunction-sections")
    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -fdata-sections -ffunction-sections")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -fdata-sections -ffunction-sections")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Wl,--gc-sections -s")
    set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} -Wl,--gc-sections -s")
endif()

if (NOT CYGWIN)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -flto")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto")
    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -flto")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -flto")
endif()

set(SHOULD_DEFINE_STUBS 0)

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(CXXBRIDGE_GEN_TARGET_OS "linux")
    include(CheckCSourceCompiles)
    check_c_source_compiles("
        #define _GNU_SOURCE
        #include <features.h>
        #ifndef __USE_GNU
            #error System is not using Glibc
        #endif
        int main() { return 0; }" LINUX_IS_USING_GLIBC)
    if (NOT LINUX_IS_USING_GLIBC)
        set(SHOULD_DEFINE_STUBS 1)
    endif()
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Android")
    set(CXXBRIDGE_GEN_TARGET_OS "android")
elseif (APPLE)
    set(SHOULD_DEFINE_STUBS 1)
    find_program(HOMEBREW_EXECUTABLE brew REQUIRED)
    execute_process(
        COMMAND ${HOMEBREW_EXECUTABLE} --prefix
        OUTPUT_VARIABLE "HOMEBREW_PREFIX"
        ERROR_QUIET
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    execute_process(
        COMMAND ${HOMEBREW_EXECUTABLE} --version
        OUTPUT_VARIABLE "HOMEBREW_VERSION"
        ERROR_QUIET
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (HOMEBREW_VERSION MATCHES "^Homebrew[ \t]+")
        string(REGEX MATCH "^Homebrew[ \t]+[^\n]+" HOMEBREW_VERSION ${HOMEBREW_VERSION})
        string(REGEX REPLACE "^Homebrew[ \t]+" "" HOMEBREW_VERSION ${HOMEBREW_VERSION})
    else()
        set(HOMEBREW_VERSION "unknown")
    endif()
    if (EXISTS ${HOMEBREW_PREFIX})
        message(STATUS "Found Homebrew: ${HOMEBREW_EXECUTABLE} (version ${HOMEBREW_VERSION})")
    else()
        message(FATAL_ERROR "Cannot find Homebrew")
    endif()
    list(INSERT CMAKE_SYSTEM_PREFIX_PATH 0 ${HOMEBREW_PREFIX} ${HOMEBREW_PREFIX}/opt/bzip2)

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE -D__DARWIN_C_LEVEL=__DARWIN_C_FULL")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_DARWIN_C_SOURCE -D__DARWIN_C_LEVEL=__DARWIN_C_FULL")

    set(CXXBRIDGE_GEN_TARGET_OS "darwin")
elseif (WIN32)
    set(CXXBRIDGE_GEN_TARGET_OS "windows")
    include(CheckSymbolExists)
    check_symbol_exists(_UCRT "_mingw.h" USE_UCRT)
elseif (CYGWIN)
    set(SHOULD_DEFINE_STUBS 1)
    add_compile_definitions(__USE_LINUX_IOCTL_DEFS)
    set(CXXBRIDGE_GEN_TARGET_OS "cygwin")
elseif (EMSCRIPTEN)
    set(CMAKE_EXECUTABLE_SUFFIX ".html")
    set(CXXBRIDGE_GEN_TARGET_OS "emscripten")
else()
    message(WARNING "Unsupported platform: ${CMAKE_SYSTEM_NAME}")
endif()

if(SHOULD_DEFINE_STUBS)
    add_compile_definitions(off64_t=off_t)
    add_compile_definitions(lseek64=lseek)
    add_compile_definitions(ftruncate64=ftruncate)
endif()
