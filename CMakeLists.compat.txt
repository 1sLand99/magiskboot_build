if (NOT APPLE)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fdata-sections -ffunction-sections -Wl,--gc-sections -s")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fdata-sections -ffunction-sections -Wl,--gc-sections -s")
    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -fdata-sections -ffunction-sections -Wl,--gc-sections -s")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -fdata-sections -ffunction-sections -Wl,--gc-sections -s")

    set(CARGO_FLAGS ${CARGO_FLAGS} -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort)
endif()

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(CXXBRIDGE_FLAGS --cfg=target_os=\\"linux\\")
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Android")
    set(CXXBRIDGE_FLAGS --cfg=target_os=\\"android\\")
elseif (APPLE)
    find_program(HOMEBREW_EXECUTABLE brew REQUIRED)
    execute_process(
        COMMAND ${HOMEBREW_EXECUTABLE} --prefix
        OUTPUT_VARIABLE "HOMEBREW_PREFIX"
        ERROR_QUIET
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    execute_process(
        COMMAND ${HOMEBREW_EXECUTABLE} --version
        OUTPUT_VARIABLE "HOMEBREW_VERSION"
        ERROR_QUIET
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (HOMEBREW_VERSION MATCHES "^Homebrew[ \\t]+")
        string(REGEX REPLACE "^Homebrew[ \\t]+" "" HOMEBREW_VERSION ${HOMEBREW_VERSION})
    else()
        set(HOMEBREW_VERSION "unknown")
    endif()
    if (EXISTS ${HOMEBREW_PREFIX})
        message(STATUS "Found Homebrew: ${HOMEBREW_EXECUTABLE} (version ${HOMEBREW_VERSION})")
    else()
        message(FATAL_ERROR "Cannot find Homebrew")
    endif()
    list(INSERT CMAKE_SYSTEM_PREFIX_PATH 0 ${HOMEBREW_PREFIX} ${HOMEBREW_PREFIX}/opt/bzip2)

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE -D__DARWIN_C_LEVEL=__DARWIN_C_FULL")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_DARWIN_C_SOURCE -D__DARWIN_C_LEVEL=__DARWIN_C_FULL")

    add_compile_definitions(off64_t=off_t)
    add_compile_definitions(lseek64=lseek)
    add_compile_definitions(ftruncate64=ftruncate)

    set(CXXBRIDGE_FLAGS --cfg=target_os=\\"darwin\\")
else()
    message(WARNING "Unsupported platform: ${CMAKE_SYSTEM_NAME}")
endif()
