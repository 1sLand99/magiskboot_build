find_program(RUSTC_EXECUTABLE rustc REQUIRED)
execute_process(
    COMMAND ${RUSTC_EXECUTABLE} -Vv
    OUTPUT_VARIABLE "RUSTC_OUTPUT"
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
string(REPLACE "\n" ";" RUSTC_OUTPUT ${RUSTC_OUTPUT})
foreach(RUSTC_OUTPUT_LINE ${RUSTC_OUTPUT})
    string(REGEX REPLACE "^[ ]+" "" RUSTC_OUTPUT_LINE ${RUSTC_OUTPUT_LINE})
    if (RUSTC_OUTPUT_LINE STREQUAL "")
        continue()
    else()
        if (RUSTC_OUTPUT_LINE MATCHES "^rustc[ \\t]+")
            string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+" RUSTC_VERSION ${RUSTC_OUTPUT_LINE})
        elseif (RUSTC_OUTPUT_LINE MATCHES "^host:[ \\t]+")
            string(REGEX REPLACE "^host:[ \\t]+" "" RUSTC_TARGET ${RUSTC_OUTPUT_LINE})
        endif()
    endif()
endforeach()
if (NOT DEFINED RUSTC_VERSION)
    set(RUSTC_VERSION "unknown")
endif()
message(STATUS "Found rustc: ${RUSTC_EXECUTABLE} (version ${RUSTC_VERSION})")
if (DEFINED RUSTC_TARGET)
    message(STATUS "Found Rust target: ${RUSTC_TARGET}")
else()
    message(FATAL_ERROR "Cannot get Rust target")
endif()
find_program(CARGO_EXECUTABLE cargo REQUIRED)
execute_process(
    COMMAND ${CARGO_EXECUTABLE} -V
    OUTPUT_VARIABLE "CARGO_VERSION"
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
if (CARGO_VERSION MATCHES "^cargo[ \\t]+")
    string(REGEX REPLACE "^cargo[ \\t]+" "" CARGO_VERSION ${CARGO_VERSION})
else()
    set(CARGO_VERSION "unknown")
endif()
message(STATUS "Found cargo: ${CARGO_EXECUTABLE}, version ${CARGO_VERSION}")
find_program(CXXBRIDGE_EXECUTABLE cxxbridge REQUIRED)
execute_process(
    COMMAND ${CXXBRIDGE_EXECUTABLE} --version
    OUTPUT_VARIABLE "CXXBRIDGE_VERSION"
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
if (CXXBRIDGE_VERSION MATCHES "^cxxbridge[ \\t]+")
    string(REGEX REPLACE "^cxxbridge[ \\t]+" "" CXXBRIDGE_VERSION ${CXXBRIDGE_VERSION})
else()
    set(CXXBRIDGE_VERSION "unknown")
endif()
message(STATUS "Found cxxbridge: ${CXXBRIDGE_EXECUTABLE} (version ${CXXBRIDGE_VERSION})")

if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/vendor/cxx-rs/.git)
    if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/vendor/cxx-rs/Cargo.toml)
        file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/vendor/cxx-rs/Cargo.toml CXX_RS_CONFIG_CONTENTS)
        foreach(CXX_RS_CONFIG_LINE ${CXX_RS_CONFIG_CONTENTS})
            string(REGEX REPLACE "^[ ]+" "" CXX_RS_CONFIG_LINE ${CXX_RS_CONFIG_LINE})
            if (CXX_RS_CONFIG_LINE STREQUAL "" OR CXX_RS_CONFIG_LINE MATCHES "^#")
                continue()
            else()
                string(REGEX MATCH "^[^=]+[ \\t]+=[ \\t]+\"[^=#[{\"]+\"" CXX_RS_CONFIG_KV ${CXX_RS_CONFIG_LINE})
                if (CXX_RS_CONFIG_KV STREQUAL "")
                    continue()
                else()
                    string(REGEX MATCH "^[^= \\t]+" CXX_RS_CONFIG_KEY ${CXX_RS_CONFIG_KV})
                    string(REGEX REPLACE "^${CXX_RS_CONFIG_KEY}[ \\t]+=[ \\t]+\"" "" CXX_RS_CONFIG_VALUE ${CXX_RS_CONFIG_KV})
                    string(REGEX REPLACE "\"$" "" CXX_RS_CONFIG_VALUE ${CXX_RS_CONFIG_VALUE})
                    if (CXX_RS_CONFIG_KEY STREQUAL "version")
                        set(CXX_RS_VERSION "${CXX_RS_CONFIG_VALUE}")
                    else()
                        continue()
                    endif()
                endif()
            endif()
        endforeach()
        if (DEFINED CXX_RS_VERSION)
            if (CXXBRIDGE_VERSION STREQUAL "${CXX_RS_VERSION}")
                message(STATUS "Found cxx-rs, version ${CXX_RS_VERSION}")
            else()
                message(FATAL_ERROR "cxx-rs version does not match cxxbridge")
            endif()
        else()
            message(FATAL_ERROR "Cannot get cxx-rs version")
        endif()
    else()
        message(FATAL_ERROR "Cannot find cxx-rs config")
    endif()
else()
    message(FATAL_ERROR "Cannot find cxx-rs")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CARGO_FLAGS "")
    set(CARGO_OUT "debug")
else()
    set(CARGO_FLAGS "-r")
    set(CARGO_OUT "release")
endif()
