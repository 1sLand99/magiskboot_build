diff --git a/native/src/external/zopfli/src/zopfli/cache.c b/native/src/external/zopfli/src/zopfli/cache.c
index 6b9444f..87b3402 100644
--- a/native/src/external/zopfli/src/zopfli/cache.c
+++ b/native/src/external/zopfli/src/zopfli/cache.c
@@ -33,8 +33,13 @@ void ZopfliInitCache(size_t blocksize, ZopfliLongestMatchCache* lmc) {
   lmc->sublen = (unsigned char*)malloc(ZOPFLI_CACHE_LENGTH * 3 * blocksize);
   if(lmc->sublen == NULL) {
     fprintf(stderr,
+#ifdef _WIN32
+        "Error: Out of memory. Tried allocating %llu bytes of memory.\n",
+        (unsigned long long)ZOPFLI_CACHE_LENGTH * 3 * blocksize);
+#else
         "Error: Out of memory. Tried allocating %lu bytes of memory.\n",
         (unsigned long)ZOPFLI_CACHE_LENGTH * 3 * blocksize);
+#endif
     exit (EXIT_FAILURE);
   }
 
diff --git a/native/src/base/Cargo.toml b/native/src/base/Cargo.toml
index f89abca..42baccf 100644
--- a/native/src/base/Cargo.toml
+++ b/native/src/base/Cargo.toml
@@ -3,3 +3,4 @@ cxx-gen = { workspace = true }
 
 [target.'cfg(windows)'.dependencies]
 filepath = "0.1.2"
+winsup = { path = "../../../../../src/winsup-rs" }
diff --git a/native/src/base/cxx_extern.rs b/native/src/base/cxx_extern.rs
index 86f56a8..a83b1df 100644
--- a/native/src/base/cxx_extern.rs
+++ b/native/src/base/cxx_extern.rs
@@ -2,8 +2,13 @@
 // Functions in this file are only for exporting to C++, DO NOT USE IN RUST
 
 use std::io;
+
+#[cfg(not(target_os = "windows"))]
 use std::os::fd::{BorrowedFd, OwnedFd, RawFd};
 
+#[cfg(target_os = "windows")]
+use winsup::fd::{BorrowedFd, OwnedFd, RawFd};
+
 use cfg_if::cfg_if;
 use cxx::private::c_char;
 use libc::mode_t;
@@ -61,8 +66,16 @@ pub(crate) fn map_file_for_cxx(path: &[u8], rw: bool) -> &'static mut [u8] {
 
 pub(crate) fn map_fd_for_cxx(fd: RawFd, sz: usize, rw: bool) -> &'static mut [u8] {
     unsafe {
+        cfg_if::cfg_if! {
+            if #[cfg(not(target_os = "windows"))] {
         map_fd(BorrowedFd::borrow_raw(fd), sz, rw)
             .log_cxx()
             .unwrap_or(&mut [])
+            } else {
+                map_fd(BorrowedFd::borrow_raw(libc::get_osfhandle(fd) as *mut libc::c_void), sz, rw)
+                    .log_cxx()
+                    .unwrap_or(&mut [])
+            }
+        }
     }
 }
diff --git a/native/src/base/files.rs b/native/src/base/files.rs
index bb1a1f7..0b4929b 100644
--- a/native/src/base/files.rs
+++ b/native/src/base/files.rs
@@ -20,9 +20,18 @@ use std::os::windows::fs::MetadataExt;
 #[cfg(target_os = "cygwin")]
 use std::os::cygwin::fs::MetadataExt;
 
+cfg_if::cfg_if! {
+if #[cfg(not(target_os = "windows"))] {
 use std::os::fd::{AsFd, BorrowedFd, IntoRawFd};
 use std::os::unix::fs::FileTypeExt;
 use std::os::unix::io::{AsRawFd, FromRawFd, OwnedFd, RawFd};
+} else {
+use winsup::fd::{AsFd, BorrowedFd, IntoRawFd};
+use std::os::windows::fs::FileTypeExt;
+use winsup::fs::{IsBlockDevice, StatSize};
+use winsup::fd::{AsRawFd, FromRawFd, OwnedFd, RawFd};
+}
+}
 use std::{io, mem, ptr, slice};
 
 use libc::{c_char, c_int, c_uint, dirent, mode_t, EEXIST, ENOENT, O_CLOEXEC, O_RDONLY, O_RDWR};
@@ -478,9 +487,15 @@ impl AsRawFd for Directory {
 }
 
 impl AsFd for Directory {
+    #[cfg(not(target_os = "windows"))]
     fn as_fd(&self) -> BorrowedFd {
         unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }
     }
+
+    #[cfg(target_os = "windows")]
+    fn as_fd(&self) -> BorrowedFd {
+        unsafe { BorrowedFd::borrow_raw(libc::get_osfhandle(self.as_raw_fd()) as *mut libc::c_void) }
+    }
 }
 
 impl Drop for Directory {
diff --git a/native/src/base/misc.cpp b/native/src/base/misc.cpp
index ee97878..0040ee3 100644
--- a/native/src/base/misc.cpp
+++ b/native/src/base/misc.cpp
@@ -76,6 +76,7 @@ rust::Vec<size_t> mut_u8_patch(
     return data.patch(from, to);
 }
 
+#ifndef _WIN32
 int fork_dont_care() {
     if (int pid = xfork()) {
         waitpid(pid, nullptr, 0);
@@ -170,6 +169,7 @@ int exec_command_sync(exec_t &exec) {
     waitpid(pid, &status, 0);
     return WEXITSTATUS(status);
 }
+#endif
 
 int new_daemon_thread(thread_entry entry, void *arg) {
     pthread_t thread;
diff --git a/native/src/base/misc.hpp b/native/src/base/misc.hpp
index 3bead41..d097388 100644
--- a/native/src/base/misc.hpp
+++ b/native/src/base/misc.hpp
@@ -282,7 +284,11 @@ struct exec_t {
     bool err = false;
     int fd = -2;
     void (*pre_exec)() = nullptr;
+#ifdef _WIN32
+    int (*fork)() = nullptr;
+#else
     int (*fork)() = xfork;
+#endif
     const char **argv = nullptr;
 };
 
@@ -292,6 +292,7 @@ struct exec_t {
     const char **argv = nullptr;
 };
 
+#ifndef _WIN32
 int exec_command(exec_t &exec);
 template <class ...Args>
 int exec_command(exec_t &exec, Args &&...args) {
@@ -322,6 +323,7 @@ void exec_command_async(Args &&...args) {
     };
     exec_command(exec);
 }
+#endif
 
 template <typename T>
 constexpr auto operator+(T e) noexcept ->
diff --git a/native/src/base/xwrap.rs b/native/src/base/xwrap.rs
index 7e7a894..04fb1f9 100644
--- a/native/src/base/xwrap.rs
+++ b/native/src/base/xwrap.rs
@@ -2,7 +2,13 @@
 // Functions in this file are only for exporting to C++, DO NOT USE IN RUST
 
 use std::ffi::CStr;
+
+#[cfg(not(target_os = "windows"))]
 use std::os::unix::io::RawFd;
+
+#[cfg(target_os = "windows")]
+use winsup::fd::RawFd;
+
 use std::ptr;
 
 use libc::{
@@ -53,8 +59,12 @@ macro_rules! perror {
 }
 
 mod c_export {
+    #[cfg(not(target_os = "windows"))]
     use std::os::unix::io::RawFd;
 
+    #[cfg(target_os = "windows")]
+    use winsup::fd::RawFd;
+
     use crate::{slice_from_ptr, slice_from_ptr_mut};
 
     #[no_mangle]
@@ -312,6 +322,8 @@ unsafe extern "C" fn xreaddir(dirp: *mut libc::DIR) -> *mut libc::dirent {
     }
 }
 
+cfg_if::cfg_if! {
+if #[cfg(not(target_os = "windows"))] {
 #[no_mangle]
 extern "C" fn xsetsid() -> i32 {
     unsafe {
@@ -335,6 +351,7 @@ extern "C" fn xsocket(domain: i32, ty: i32, protocol: i32) -> RawFd {
 }
 
 #[no_mangle]
+#[cfg(not(target_os = "windows"))]
 unsafe extern "C" fn xbind(socket: i32, address: *const sockaddr, len: socklen_t) -> i32 {
     let r = libc::bind(socket, address, len);
     if r < 0 {
@@ -386,6 +398,8 @@ unsafe extern "C" fn xrecvmsg(fd: RawFd, msg: *mut libc::msghdr, flags: i32) ->
     }
     r
 }
+}
+}
 
 #[no_mangle]
 unsafe extern "C" fn xaccess(path: *const c_char, mode: i32) -> i32 {
@@ -632,6 +646,7 @@ unsafe extern "C" fn xmmap(
 }
 
 #[no_mangle]
+#[cfg(not(target_os = "windows"))]
 extern "C" fn xfork() -> i32 {
     unsafe {
         let r = libc::fork();
@@ -625,6 +662,7 @@ extern "C" fn xfork() -> i32 {
 }
 
 #[no_mangle]
+#[cfg(not(target_os = "windows"))]
 unsafe extern "C" fn xpoll(fds: *mut pollfd, nfds: nfds_t, timeout: i32) -> i32 {
     let r = libc::poll(fds, nfds, timeout);
     if r < 0 {
diff --git a/native/src/boot/Cargo.toml b/native/src/boot/Cargo.toml
index bcf3b25..c0aa236 100644
--- a/native/src/boot/Cargo.toml
+++ b/native/src/boot/Cargo.toml
@@ -26,3 +26,6 @@ p384 = { workspace = true }
 fdt = { workspace = true }
 bytemuck = { workspace = true, features = ["derive", "min_const_generics"] }
 num-traits = { workspace = true }
+
+[target.'cfg(windows)'.dependencies]
+winsup = { path = "../../../../../src/winsup-rs" }
diff --git a/native/src/boot/cpio.rs b/native/src/boot/cpio.rs
index 0e36b4d..0c353e2 100644
--- a/native/src/boot/cpio.rs
+++ b/native/src/boot/cpio.rs
@@ -1,10 +1,24 @@
 
 use std::collections::BTreeMap;
 use std::fmt::{Display, Formatter};
-use std::fs::{metadata, read, DirBuilder, File};
+
+use std::fs::{read, File};
+
+#[cfg(not(target_os = "windows"))]
+use std::fs::{metadata, DirBuilder};
+
+#[cfg(target_os = "windows")]
+use winsup::fs::{metadata, DirBuilder};
+
 use std::io::Write;
 use std::mem::size_of;
+
+#[cfg(not(target_os = "windows"))]
 use std::os::unix::fs::{symlink, DirBuilderExt, FileTypeExt, MetadataExt};
+
+#[cfg(target_os = "windows")]
+use winsup::fs::{symlink, DirBuilderExt, FileTypeExt, MetadataExt};
+
 use std::path::Path;
 use std::process::exit;
 
diff --git a/native/src/boot/payload.rs b/native/src/boot/payload.rs
index dab86d8..c0aca63 100644
--- a/native/src/boot/payload.rs
+++ b/native/src/boot/payload.rs
@@ -1,7 +1,12 @@
 use std::fs::File;
 use std::io::{BufReader, Read, Seek, SeekFrom, Write};
+
+#[cfg(not(target_os = "windows"))]
 use std::os::fd::{AsRawFd, FromRawFd};
 
+#[cfg(target_os = "windows")]
+use winsup::fd::{AsRawFd, FromRawFd};
+
 use byteorder::{BigEndian, ReadBytesExt};
 use quick_protobuf::{BytesReader, MessageRead};
 
diff --git a/native/src/base/stream.cpp b/native/src/base/stream.cpp
index b7a775c..9a77dde 100644
--- a/native/src/base/stream.cpp
+++ b/native/src/base/stream.cpp
@@ -12,6 +12,10 @@
 
 using namespace std;
 
+#ifdef _WIN32
+#  define byte std::byte
+#endif
+
 #if 0
 static int strm_read(void *v, char *buf, size_t len) {
     auto strm = static_cast<channel *>(v);
diff --git a/native/src/boot/format.hpp b/native/src/boot/format.hpp
index 79dac8f..e0634ba 100644
--- a/native/src/boot/format.hpp
+++ b/native/src/boot/format.hpp
@@ -9,7 +9,12 @@ typedef enum {
     AOSP,
     AOSP_VENDOR,
     DHTB,
+#ifdef _WIN32
+    FORMAT_BLOB,
+#   define BLOB FORMAT_BLOB
+#else
     BLOB,
+#endif
 /* Compression formats */
     GZIP,
     ZOPFLI,
-- 
2.41.0.windows.3
